<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Michael Morris&#39; site</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Michael Morris&#39; site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Oct 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NFL Big Data Bowl 2021 setup and play animation</title>
      <link>/2020/10/nfl-big-data-bowl-2021-exploration.en-us/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/10/nfl-big-data-bowl-2021-exploration.en-us/</guid>
      <description>The 2021 edition of the NFL’s Big Data Bowl is here. The challenge is to evaluate defensive performance on passing plays using player tracking data, without offensive or defensive lines.
Resources that I’ve found helpful :
 Tom Bliss tutorial Definitions of events in the data How to animate a specific play R for NFL analytics  What’s covered here:
 SQLite database of the tracking data examples of animations using the best and worst (by EPA) Seahawks plays in the dataset.</description>
    </item>
    
    <item>
      <title>nflfastR and how lucky is Seattle to have Russell Wilson?</title>
      <link>/2020/09/nflfastr-and-how-lucky-is-seattle-to-have-russell-wilson.en-us/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/09/nflfastr-and-how-lucky-is-seattle-to-have-russell-wilson.en-us/</guid>
      <description>The relatively new nflfastR package is pretty incredible. One command and you get a local SQLite database with 20 years of cleaned play by play data:
 update_db( dbdir = “/home/michael/Documents/NFL/”, dbname = “nflpbpdb”, tblname = “pbp_raw”, force_rebuild = FALSE)
 And you can run the same command to update with any new games. Incredible.
Playing around with it, one measure you get is completion percentage above expectation (CPOE), which takes into account the relative difficulty of each throw and the outcomes.</description>
    </item>
    
    <item>
      <title>RTHORR package now available</title>
      <link>/2020/09/rthorr-package.en-us/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/09/rthorr-package.en-us/</guid>
      <description>I’ve recently made available my first public R package. RTHORR is designed to make it easy to run the randomaization test of hypothesized order relations (RTHOR; Hubert &amp;amp; Arabie, 1987). Terence Tracey, who wrote most of the original code, graciously agreed to let me make some minor alterations and turn his code into this package. Please see the link above for installation instructions and more information.</description>
    </item>
    
  </channel>
</rss>